{
  "class": "AS3",
  "action": "deploy",
  "persist": true,
  "declaration": {
    "class": "ADC",
    "schemaVersion": "3.0.0",
    "id": "{{ uuid() }}",
    "label": "Game Service",
    "game_service": {
      "class": "Tenant",
      "{{ ninja.game_service.name }}": {
        "class": "Application",
        "label": "{{ ninja.game_service.name }} using {{ ninja.game_config.game_js_file }}",
        "template": "http",
        "serviceMain": {
          "class": "Service_HTTP",
          {#
           # the virtualAddresses are read from the configuration
           # to_list makes sure that it will become a list no matter if it is a single entry or list already
          -#}
          "virtualAddresses": {{ ninja.game_service.addresses | to_list | jsonify }},
          "virtualPort": {{ ninja.game_service.port }},
          "iRules": [ "game_irule" ]
        },
        "game_irule": {
          "class": "iRule",
          "remark": "iRule uses js file: {{ ninja.game_config.game_js_file }}",
          {#
           # read the game javascript file and store it in game_js
           # the filepath is stored in config.yaml and accessible via ninja.game_config.game_js_file
          -#}
          {%
              set game_js = readfile(ninja.game_config.game_js_file)
          -%}
          {#
           # the format of the integrity value in the script tag is: integrity="{digest algorithm}-{base64 encoded binary digest}"
           # 1. calculate binary digest for game_js
          -#}
          {%
              set game_js_binary_digest = hashfunction(data=game_js, hash_algo=ninja.game_config.hash_algorithm, digest_format="binary")
          -%}
          {#
           # 2. base64 encode binary digest and prepend digest algorithm
          -#}
          {%
              set game_js_integrity = ninja.game_config.hash_algorithm + "-" + b64encode(game_js_binary_digest)
          -%}
          {#
           # read the iRule file from the variable, pass it to ninjutsu to execute jinja2 with the current
           # context to the iRule file and then format it in a json compatible way
          -#}
          "iRule": {{ ninja.game_service.irule | readfile | ninjutsu | jsonify }}
        }
      }
    }
  }
}
